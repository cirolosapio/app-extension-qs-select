{
  "type": "component",
  "props": {
    "value": {
      "type": [
        "Number",
        "String",
        "Array"
      ],
      "required": true,
      "desc": "Model of the component; Must be Array if using 'multiple' prop; Either use this property (along with a listener for 'input' event) OR use v-model directive",
      "examples": [
        "v-model=\"myModel\""
      ],
      "category": "model"
    },
    "multiple": {
      "type": "Boolean",
      "desc": "Allow multiple selection; Model must be Array",
      "category": "model|selection"
    },
    "options": {
      "type": "Array",
      "desc": "Available options that the user can select from. For best performance freeze the list of options.",
      "default": "[]",
      "examples": [
        ":options=\"[ 'BMW', 'Samsung Phone' ]\"",
        ":options=\"[ { label: 'BMW', value: 'car' }, { label: 'Samsung Phone', value: 'phone' } ]\""
      ],
      "category": "options"
    },
    "url": {
      "type": "Object",
      "desc": "It is an object that contains up to four parameters. Route (REQUIRED, the url that will be requested), instance (REQUIRED, the axios instance to be used to make the request), filterParam (optional, custom name for the request field) and filters (optional, filters passed to the route)",
      "examples": [
        ":options=\"{ route: 'products', instance: $axios.get }\"",
        ":options=\"{ route: 'products', instance: $axios.get, filters: { brand_id: 5 } }\"",
        ":options=\"{ route: 'products', instance: $axios.get, filterParam: 'search', filters: { brand_id: 5 } }\""
      ],
      "category": "options"
    },
    "noClear": {
      "type": "Boolean",
      "desc": "Disable the clearable feature",
      "category": "options"
    },
    "noOnly": {
      "type": "Boolean",
      "desc": "Disable the only feature",
      "category": "options"
    },
    "noReverse": {
      "type": "Boolean",
      "desc": "Disable the reverse feature",
      "category": "options"
    },
    "noSelectAll": {
      "type": "Boolean",
      "desc": "Disable the select-all feature",
      "category": "options"
    },
    "noDenseCounter": {
      "type": "Boolean",
      "desc": "Does not wrap selection in the display value; Available only when multiple.",
      "category": "options"
    },
    "noClientSearch": {
      "type": "Boolean",
      "desc": "Disable filter options on the client",
      "category": "options"
    },
    "min-length": {
      "type": [
        "Number",
        "String"
      ],
      "desc": "Minimum number of characters to start the search; Available only when lazy.",
      "examples": [
        ":min-length=\"3\""
      ],
      "category": "search"
    },
    "option-value": {
      "type": "String",
      "desc": "Property of option which holds the 'value'",
      "default": "value",
      "examples": [
        "option-value=\"modelNumber\""
      ],
      "category": "options"
    },
    "option-label": {
      "type": "String",
      "desc": "Property of option which holds the 'label'",
      "default": "label",
      "examples": [
        "option-label=\"itemName\""
      ],
      "category": "options"
    },
    "option-disable": {
      "type": "String",
      "desc": "Property of option which tells it's disabled",
      "default": "disable",
      "examples": [
        "option-disable=\"cannotSelect\""
      ],
      "category": "options"
    },
    "hide-dropdown-icon": {
      "type": "Boolean",
      "desc": "Hides dropdown icon",
      "category": "content|behavior"
    },
    "dropdown-icon": {
      "type": "String",
      "desc": "Icon name following Quasar convention; Make sure you have the icon library installed unless you are using 'img:' prefix",
      "examples": [
        "map",
        "ion-add",
        "img:https://cdn.quasar.dev/logo/svg/quasar-logo.svg",
        "img:statics/path/to/some_image.png"
      ],
      "category": "content"
    },
    "readonly": {
      "type": "Boolean",
      "desc": "Put component in readonly mode",
      "category": "state"
    },
    "disable": {
      "type": "Boolean",
      "desc": "Put component in disabled mode",
      "category": "state"
    },
    "dark": {
      "type": "Boolean",
      "desc": "Notify the component that the background is a dark color",
      "category": "style"
    },
    "color": {
      "type": "String",
      "desc": "Color name for component from the Quasar Color Palette",
      "examples": [
        "primary",
        "teal-10"
      ],
      "category": "style"
    },
    "text-color": {
      "type": "String",
      "desc": "Overrides text color (if needed); Color name from the Quasar Color Palette",
      "examples": [
        "primary",
        "teal-10"
      ],
      "category": "style"
    },
    "dense": {
      "type": "Boolean",
      "desc": "Dense mode; occupies less space",
      "category": "style"
    },
    "flat": {
      "type": "Boolean",
      "desc": "Applies a 'flat' design (no default shadow)",
      "category": "style"
    },
    "bordered": {
      "type": "Boolean",
      "desc": "Applies a default border to the component",
      "category": "style"
    },
    "square": {
      "type": "Boolean",
      "desc": "Removes border-radius so borders are squared",
      "category": "style"
    },
    "rounded": {
      "type": "Boolean",
      "desc": "Applies a small standard border-radius for a squared shape of the component",
      "category": "style"
    },
    "tabindex": {
      "type": [
        "Number",
        "String"
      ],
      "desc": "Tabindex HTML attribute value",
      "examples": [
        "0",
        "100"
      ],
      "category": "general"
    },
    "menu-shrink": {
      "type": "Boolean",
      "desc": "Allow the options list to be narrower than the field (only in menu mode)",
      "category": "options",
      "addedIn": "v1.9.2"
    },
    "menu-anchor": {
      "type": "String",
      "desc": "Two values setting the starting position or anchor point of the options list relative to the field (only in menu mode)",
      "values": [
        "top left",
        "top middle",
        "top right",
        "center left",
        "center middle",
        "center right",
        "bottom left",
        "bottom center",
        "bottom right"
      ],
      "examples": [
        "top left",
        "bottom right"
      ],
      "category": "position",
      "addedIn": "v1.9.2"
    },
    "menu-self": {
      "type": "String",
      "desc": "Two values setting the options list's own position relative to its target (only in menu mode)",
      "values": [
        "top left",
        "top middle",
        "top right",
        "center left",
        "center middle",
        "center right",
        "bottom left",
        "bottom center",
        "bottom right"
      ],
      "examples": [
        "top left",
        "bottom right"
      ],
      "category": "position",
      "addedIn": "v1.9.2"
    },
    "menu-offset": {
      "type": "Array",
      "desc": "An array of two numbers to offset the options list horizontally and vertically in pixels (only in menu mode)",
      "examples": [
        "[8, 8]",
        "[5, 10]"
      ],
      "category": "position",
      "addedIn": "v1.9.2"
    },
    "popup-content-class": {
      "type": "String",
      "desc": "Class definitions to be attributed to the popup content",
      "examples": [
        "my-special-class"
      ],
      "category": "style"
    },
    "popup-content-style": {
      "type": [
        "Array",
        "String",
        "Object"
      ],
      "desc": "Style definitions to be attributed to the popup content",
      "examples": [
        "background-color: #ff0000",
        ":content-style=\"{ backgroundColor: '#ff0000' }\""
      ],
      "category": "style"
    },
    "input-class": {
      "type": [
        "Array",
        "String",
        "Object"
      ],
      "desc": "Class definitions to be attributed to the underlying input tag",
      "examples": [
        "my-special-class",
        ":input-class=\"{ 'my-special-class': <condition> }\""
      ],
      "category": "style",
      "addedIn": "v1.1.7"
    },
    "input-style": {
      "type": [
        "Array",
        "String",
        "Object"
      ],
      "desc": "Style definitions to be attributed to the underlying input tag",
      "examples": [
        "background-color: #ff0000",
        ":input-style=\"{ backgroundColor: '#ff0000' }\""
      ],
      "category": "style",
      "addedIn": "v1.1.7"
    },
    "transition-show": {
      "type": "String",
      "examples": [
        "fade",
        "slide-down"
      ],
      "desc": "Transition when showing the feature buttons; One of Quasar's embedded transitions",
      "default": "jump-left",
      "category": "behavior"
    },
    "transition-hide": {
      "type": "String",
      "examples": [
        "fade",
        "slide-down"
      ],
      "desc": "Transition when hiding the feature buttons; One of Quasar's embedded transitions",
      "default": "jump-right",
      "category": "behavior"
    },
    "behavior": {
      "type": "String",
      "desc": "Overrides the default dynamic mode of showing as menu on desktop and dialog on mobiles",
      "values": [
        "default",
        "menu",
        "dialog"
      ],
      "default": "default",
      "category": "behavior",
      "addedIn": "v1.1.0"
    }
  },
  "slots": {
    "default": {
      "desc": "Default slot in the devland unslotted content of the component"
    },
    "prepend": {
      "desc": "Prepend inner field; Suggestions: QIcon, QBtn"
    },
    "append": {
      "desc": "Append to inner field; Suggestions: QIcon, QBtn"
    },
    "before": {
      "desc": "Prepend outer field; Suggestions: QIcon, QBtn"
    },
    "after": {
      "desc": "Append outer field; Suggestions: QIcon, QBtn"
    },
    "error": {
      "desc": "Slot for errors; Enabled only if 'bottom-slots' prop is used; Suggestion: <div>"
    },
    "hint": {
      "desc": "Slot for hint text; Enabled only if 'bottom-slots' prop is used; Suggestion: <div>"
    },
    "loading": {
      "desc": "Override default spinner when component is in loading mode; Suggestion: spinners"
    },
    "before-options": {
      "desc": "Template slot for the elements that should be rendered before the list of options",
      "addedIn": "v1.1.0"
    },
    "after-options": {
      "desc": "Template slot for the elements that should be rendered after the list of options",
      "addedIn": "v1.1.0"
    }
  },
  "scopedSlots": {
    "no-option": {
      "desc": "What should the menu display after filtering options and none are left to be displayed; Suggestion: <div>",
      "scope": {
        "inputValue": {
          "type": "String",
          "desc": "Input textfield value, if any (not QSelect model)",
          "examples": [
            "typed something"
          ]
        }
      }
    }
  },
  "events": {
    "input": {
      "desc": "Emitted when the component needs to change the model; Is also used by v-model",
      "params": {
        "value": {
          "type": "Any",
          "desc": "New model value",
          "required": true,
          "__exemption": [
            "examples"
          ]
        }
      }
    },
    "item": {
      "desc": "Emitted when the component needs to change the model; Is also used by v-model",
      "params": {
        "value": {
          "type": "Any",
          "desc": "New model value",
          "required": true,
          "__exemption": [
            "examples"
          ]
        }
      }
    }
  },
  "methods": {
    "invertSelection": {
      "desc": "Invert the current selection; Available only when multiple."
    },
    "selectAll": {
      "desc": "Select all the options; Available only when multiple."
    },
    "fetchOptions": {
      "desc": "Fetch and update the options"
    },
    "only": {
      "desc": "Select only one option; Available only when multiple.",
      "params": {
        "value": {
          "type": [
            "Number",
            "String"
          ],
          "desc": "Value to select",
          "required": true,
          "examples": [
            1
          ]
        }
      }
    }
  }
}